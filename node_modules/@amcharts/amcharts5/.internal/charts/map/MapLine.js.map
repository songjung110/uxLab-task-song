{"version":3,"file":"MapLine.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/map/MapLine.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MapLineSeries, IMapLineSeriesDataItem } from \"./MapLineSeries\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { DataItem } from \"../../core/render/Component\";\n\n\nimport { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport { geoLength, geoInterpolate, geoDistance } from \"d3-geo\";\n\nexport interface IMapLineSettings extends IGraphicsSettings {\n\n\t/**\n\t * A GeoJSON representation of the polygons geometry.\n\t */\n\tgeometry?: GeoJSON.LineString | GeoJSON.MultiLineString;\n\n\t/**\n\t * @todo needs description\n\t * @default 0.5\n\t */\n\tprecision?: number;\n}\n\nexport interface IMapLinePrivate extends IGraphicsPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tseries: MapLineSeries;\n\n}\n\n/**\n * A line object in a [[MapLineSeries]].\n */\nexport class MapLine extends Graphics {\n\n\tdeclare public _settings: IMapLineSettings;\n\tdeclare public _privateSettings: IMapLinePrivate;\n\n\tpublic static className: string = \"MapLine\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([MapLine.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this._projectionDirty || this.isDirty(\"geometry\") || this.isDirty(\"precision\")) {\n\t\t\tconst geometry = this.get(\"geometry\")!;\n\t\t\tif (geometry) {\n\t\t\t\tconst series = this.getPrivate(\"series\");\n\t\t\t\tif (series) {\n\t\t\t\t\tconst chart = series.chart;\n\t\t\t\t\tif (chart) {\n\t\t\t\t\t\tconst projection = chart.get(\"projection\");\n\t\t\t\t\t\tlet clipAngle: number | null = null;\n\n\t\t\t\t\t\tif (projection) {\n\t\t\t\t\t\t\tclipAngle = projection.clipAngle();\n\t\t\t\t\t\t\tprojection.precision(this.get(\"precision\", 0.5));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst dataItem = this.dataItem as DataItem<IMapLineSeriesDataItem>;\n\t\t\t\t\t\tconst geoPath = chart.getPrivate(\"geoPath\");\n\t\t\t\t\t\tif (geoPath && dataItem) {\n\t\t\t\t\t\t\tthis._clear = true;\n\t\t\t\t\t\t\tif (dataItem.get(\"lineType\", series.get(\"lineType\")) == \"straight\") {\n\n\t\t\t\t\t\t\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\t\tlet coordinates = geometry.coordinates;\n\t\t\t\t\t\t\t\t\tif (coordinates) {\n\n\t\t\t\t\t\t\t\t\t\tlet segments!: number[][][];\n\n\t\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\t\t\t\t\t\t\tsegments = [coordinates] as number[][][];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (geometry.type == \"MultiLineString\") {\n\t\t\t\t\t\t\t\t\t\t\tsegments = coordinates as number[][][];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\t\t\t\t\t\t\t\tfor (let s = 0; s < segments.length; s++) {\n\t\t\t\t\t\t\t\t\t\t\t\tlet segment = segments[s];\n\t\t\t\t\t\t\t\t\t\t\t\tif (segment.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst gp0 = segment[0];\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst p0 = chart.convert({ longitude: gp0[0], latitude: gp0[1] })\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay.lineTo(p0.x, p0.y);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let p = 0; p < segment.length; p++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst gp = segment[p];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst pn = chart.convert({ longitude: gp[0], latitude: gp[1] })\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay.lineTo(pn.x, pn.y);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.set(\"draw\", (_display) => {\n\t\t\t\t\t\t\t\t\tif (projection && series.get(\"clipBack\") === false) {\n\t\t\t\t\t\t\t\t\t\tprojection.clipAngle(180);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tgeoPath.context(this._display as any);\n\t\t\t\t\t\t\t\t\tgeoPath(geometry);\n\t\t\t\t\t\t\t\t\tgeoPath.context(null);\n\n\t\t\t\t\t\t\t\t\tif (projection) {\n\t\t\t\t\t\t\t\t\t\tprojection.clipAngle(clipAngle as any);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t\tthis._projectionDirty = true;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._projectionDirty = false;\n\t}\n\n\t/**\n\t * Converts relative position along the line (0-1) into pixel coordinates.\n\t *\n\t * @param position  Position (0-1)\n\t * @return Coordinates\n\t */\n\tpublic positionToGeoPoint(position: number): IGeoPoint {\n\n\t\tconst geometry = this.get(\"geometry\")!;\n\t\tconst series = this.getPrivate(\"series\");\n\t\tconst chart = series.chart;\n\t\tconst dataItem = this.dataItem as DataItem<IMapLineSeriesDataItem>;\n\n\t\tif (geometry && series && chart && dataItem) {\n\t\t\tconst lineType = dataItem.get(\"lineType\", series.get(\"lineType\"));\n\t\t\tlet totalDistance: number = geoLength(geometry);\n\t\t\tlet currentDistance: number = 0;\n\n\t\t\tlet distanceAB: number;\n\t\t\tlet positionA: number = 0;\n\t\t\tlet positionB: number = 0;\n\t\t\tlet pointA!: [number, number];\n\t\t\tlet pointB!: [number, number];\n\n\t\t\tlet coordinates = geometry.coordinates;\n\t\t\tif (coordinates) {\n\t\t\t\tlet segments!: number[][][];\n\n\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\tsegments = [coordinates] as number[][][];\n\t\t\t\t}\n\t\t\t\telse if (geometry.type == \"MultiLineString\") {\n\t\t\t\t\tsegments = coordinates as number[][][];\n\t\t\t\t}\n\n\t\t\t\tfor (let s = 0; s < segments.length; s++) {\n\t\t\t\t\tlet segment = segments[s];\n\t\t\t\t\tif (segment.length > 1) {\n\t\t\t\t\t\tfor (let p = 1; p < segment.length; p++) {\n\t\t\t\t\t\t\tpointA = segment[p - 1] as [number, number];\n\t\t\t\t\t\t\tpointB = segment[p] as [number, number];\n\n\t\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\n\t\t\t\t\t\t\tdistanceAB = geoDistance(pointA, pointB);\n\t\t\t\t\t\t\tcurrentDistance += distanceAB;\n\t\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\n\n\t\t\t\t\t\t\tif (positionA <= position && positionB > position) {\n\t\t\t\t\t\t\t\ts = segments.length;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (segment.length == 1) {\n\t\t\t\t\t\tpointA = segment[0] as [number, number];\n\t\t\t\t\t\tpointB = segment[0] as [number, number];\n\t\t\t\t\t\tpositionA = 0;\n\t\t\t\t\t\tpositionB = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pointA && pointB) {\n\t\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\n\t\t\t\t\tlet location: number[];\n\n\t\t\t\t\tif (lineType == \"straight\") {\n\t\t\t\t\t\tlet p0 = chart.convert({ longitude: pointA[0], latitude: pointA[1] });\n\t\t\t\t\t\tlet p1 = chart.convert({ longitude: pointB[0], latitude: pointB[1] });\n\n\t\t\t\t\t\tlet x = p0.x + (p1.x - p0.x) * positionAB;\n\t\t\t\t\t\tlet y = p0.y + (p1.y - p0.y) * positionAB;\n\n\t\t\t\t\t\treturn chart.invert({ x: x, y: y });\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlocation = geoInterpolate(pointA, pointB)(positionAB);\n\t\t\t\t\t\treturn { longitude: location[0], latitude: location[1] }\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n}\n"]}